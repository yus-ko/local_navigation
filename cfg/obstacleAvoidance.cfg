#!/usr/bin/env python
PACKAGE = "local_navigation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#
gen.add("Kcp", double_t, 0, "Evaluation parameter k_cp", 1, 0, 1)
gen.add("Kg", double_t, 0, "Evaluation parameter k_g", 0.7, 0, 1)
gen.add("KcurAngle", double_t, 0, "Evaluation parameter k_curAngle", 0.5, 0, 1)
gen.add("KprevAngle", double_t, 0, "Evaluation parameter k_prevAngle", 0.25, 0, 1)
gen.add("Kv", double_t, 0, "Evaluation parameter k_vel", 0.01, 0, 1)
#
gen.add("EtaCp", double_t, 0, "Cost function parameter eta_cp", 0.5, 0, 1)
gen.add("EtaG", double_t, 0, "Cost function parameter eta_g", 0.5, 0, 1)
gen.add("EtaCurAngle", double_t, 0, "Cost function parameter eta_curAngle", 0.5, 0, 1)
gen.add("EtaPrevAngle", double_t, 0, "Cost function parameter eta_prevAngle", 0.5, 0, 1)
gen.add("EtaVel", double_t, 0, "Cost function parameter eta_vel", 1, 0, 10)
#
gen.add("safeRange", double_t, 0, "Cost function parameter safe_range", 1.5, 0, 5)
gen.add("crossWeightX", double_t, 0, "Cost function parameter safe_range", 4, 1, 100)
gen.add("crossWeightY", double_t, 0, "Cost function parameter safe_range", 1, 1, 100)
gen.add("timeBias", double_t, 0, "Cost function parameter safe_range", 0.5, 0, 10)
#
size_enum = gen.enum([ gen.const("None", int_t, 0, "A small constant"),
                  gen.const("debug1", int_t, 1, "A medium constant"),
                  gen.const("debug2", int_t, 2, "A large constant")],
                  "An enum to set size")
gen.add("debugType", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 2, edit_method=size_enum)
#
#cross point cheker
gen.add("crossPointCheckerFlag", bool_t, 0, "Debug cross point parameter crossPointCheckerFlag", False)
# gen.add("debugEncoderVel_r", double_t, 0, "Debug cross point parameter encoderVel_r", 0, -1, 1)
# gen.add("debugEncoderVel_l", double_t, 0, "Debug cross point parameter encoderVel_l", 0, -1, 1)
gen.add("debugCur_vel", double_t, 0, "Debug cross point parameter cmd_vel", 0.2, -1, 1)
gen.add("debugCur_angle", double_t, 0, "Debug cross point parameter cmd_vel", 90, 45, 135)
gen.add("debugCmd_vel", double_t, 0, "Debug cross point parameter cmd_vel", 0, -1, 1)
gen.add("debugCmd_angle", double_t, 0, "Debug cross point parameter cmd_angle", 90, 45, 135)
gen.add("debugIndexRef", int_t, 0, "Debug cross point parameter IndexRef", 0, 0, 10)
gen.add("debugGpRef_x", double_t, 0, "Debug cross point parameter gpRef_x", 0, -4.0, 4.0)
gen.add("debugGpRef_y", double_t, 0, "Debug cross point parameter gpRef_y", 0, -4.0, 4.0)
gen.add("debugGpRef_z", double_t, 0, "Debug cross point parameter gpRef_z", 0, -4.0, 4.0)
gen.add("debugTwistRefLinear_x", double_t, 0, "Debug cross point parameter TwistRefLinear_x", 0, -1.0, 1.0)
gen.add("debugTwistRefLinear_y", double_t, 0, "Debug cross point parameter TwistRefLinear_y", 0, -1.0, 1.0)
# gen.add("debugTwistRefLinear_z", double_t, 0, "Debug cross point parameter TwistRefLinear_z", 0, -1.0, 1.0)
gen.add("debugTwistRefAngular_theta", double_t, 0, "Debug cross point parameter TwistRefAngular_theta", 0, -3.14, 3.14)
gen.add("debugObstacleRadius", double_t, 0, "Debug cross point parameter ObstacleRadius", 0.2, 0.1, 1)
gen.add("debugRobotRadius", double_t, 0, "Debug cross point parameter RobotRadius", 0.2, 0.1, 1)
#
#histgram cheker
gen.add("debugHistgramCheckerFlag", bool_t, 0, "Flagment of debug program histgram output", False)
gen.add("debugObstacleNum", int_t, 0, "Debug histgram output: obstacle num", 0, 0, 3)
gen.add("debugObstacleX1", double_t, 0, "Debug histgram output: obstacle1 posX", 0, -4, 4)
gen.add("debugObstacleY1", double_t, 0, "Debug histgram output: obstacle1 posY", 0, -4, 4)
gen.add("debugObstacleSize1", double_t, 0, "Debug histgram output: obstacle1 size", 0, 0.1, 1)
gen.add("debugObstacleX2", double_t, 0, "Debug histgram output: obstacle2 posX", 0, -4, 4)
gen.add("debugObstacleY2", double_t, 0, "Debug histgram output: obstacle2 posY", 0, -4, 4)
gen.add("debugObstacleSize2", double_t, 0, "Debug histgram output: obstacle2 size", 0, 0.1, 1)
gen.add("debugObstacleX3", double_t, 0, "Debug histgram output: obstacle3 posX", 0, -4, 4)
gen.add("debugObstacleY3", double_t, 0, "Debug histgram output: obstacle3 posY", 0, -4, 4)
gen.add("debugObstacleSize3", double_t, 0, "Debug histgram output: obstacle3 size", 0, 0.1, 1)
gen.add("debugThresholdDistance", double_t, 0, "Debug histgram output: threshold distance", 0, 1, 5)
gen.add("debugMinAngle", double_t, 0, "Debug histgram output: min angle deg", 45, 0, 90)
gen.add("debugMaxAngle", double_t, 0, "Debug histgram output: max angle deg", 135, 90, 180)
gen.add("debugDivAngle", double_t, 0, "Debug histgram output: div angle deg", 1, 0.01, 90)
gen.add("debugMarginRadius", double_t, 0, "Debug histgram output: debugMarginRadius", 0.2, 0.1, 1)
#output vfh checker
gen.add("debugOutputVFHCheckerFlag", bool_t, 0, "Flagment of debug program output", False)
gen.add("debugEtaG", double_t, 0, "Debug output: eta with goal angle", 1, 0, 100)
gen.add("debugEtaCurAngle", double_t, 0, "Debug output: eta with angles on time", 1, 0, 100)
gen.add("debugEtaPrevAngle", double_t, 0, "Debug output: eta with goal angle", 1, 0, 100)
gen.add("debugKg", double_t, 0, "Debug output: k_g", 0.5, 0, 100)
gen.add("debugKcurAngle", double_t, 0, "Debug output: k_curAngle", 0.5, 0, 100)
gen.add("debugKprevAngle", double_t, 0, "Debug output: k_omega", 0.5, 0, 100)
gen.add("debugGoalPosX", double_t, 0, "Debug output: goal pos X", 0, -8.0, 8.0)
gen.add("debugGoalPosY", double_t, 0, "Debug output: goal pos Y", 4.0, -8.0, 8.0)
gen.add("debugCurAng", double_t, 0, "Debug output: current angle", 90, -180, 180)
gen.add("debugPrevTagAng", double_t, 0, "Debug output: previously target angle", 90, -180, 180)
#output cross point VFH checker
gen.add("debugOutputCPVFHCheckerFlag", bool_t, 0, "Flagment of debug program output CPVFH", False)
gen.add("debugEtaCp", double_t, 0, "Debug CPVFH output : eta with cross point", 1, 0, 100)
gen.add("debugKcp", double_t, 0, "Debug CPVFH output : k_cp", 0.5, 0, 100)
gen.add("debugObstacleVx1", double_t, 0, "Debug CPVFH output: obstacle1 VelX", 0, -1.0, 1.0)
gen.add("debugObstacleVy1", double_t, 0, "Debug CPVFH output: obstacle1 VelY", 0, -1.0, 1.0)
gen.add("debugObstacleVx2", double_t, 0, "Debug CPVFH output: obstacle2 VelX", 0, -1.0, 1.0)
gen.add("debugObstacleVy2", double_t, 0, "Debug CPVFH output: obstacle2 VelY", 0, -1.0, 1.0)
gen.add("debugObstacleVx3", double_t, 0, "Debug CPVFH output: obstacle3 VelX", 0, -1.0, 1.0)
gen.add("debugObstacleVy3", double_t, 0, "Debug CPVFH output: obstacle3 VelY", 0, -1.0, 1.0)
gen.add("debugObstacleSizeThreshold", double_t, 0, "Debug CPVFH output: debugObstacleSizeThreshold", 1.0, 0.01, 10.0)
#
gen.add("debugRotationVelocityCheckerFlag", bool_t, 0, "Flagment of debug program output CPVFH", True)
gen.add("debugRotOmega", double_t, 0, "Debug CPVFH output: rotation omega", 0, -3.14, 3.14)
#
gen.add("displayOutput", bool_t, 0, "Flagment of viewer cross point ", True)
#
exit(gen.generate(PACKAGE, "local_navigation", "obstacleAvoidance"))