#!/usr/bin/env python
PACKAGE = "local_navigation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#weight K
gen.add("K1", double_t, 0, "Evaluation parameter k_g", 5, 0, 10)
gen.add("K2", double_t, 0, "Evaluation parameter k_curAngle", 1, 0, 10)
gen.add("K3", double_t, 0, "Evaluation parameter k_prevAngle", 1, 0, 10)
#eta
gen.add("EtaG", double_t, 0, "Cost function parameter eta_g", 1, 0, 100)
gen.add("EtaCurAngle", double_t, 0, "Cost function parameter eta_curAngle", 1, 0, 100)
gen.add("EtaPrevAngle", double_t, 0, "Cost function parameter eta_prevAngle", 1, 0, 100)
#
gen.add("minAngle", double_t, 0, "Debug histgram output: min angle deg", 45, 0, 90)
gen.add("maxAngle", double_t, 0, "Debug histgram output: max angle deg", 135, 90, 180)
gen.add("divAngle", double_t, 0, "Debug histgram output: div angle deg", 4, 0.01, 90)
gen.add("distanceThreshold", double_t, 0, "Debug histgram output: debugMarginRadius", 1.0, 0.1, 5.0)
gen.add("marginRadius", double_t, 0, "Debug histgram output: debugMarginRadius", 0.2, 0.1, 1)
#
gen.add("node_depth", int_t, 0, "Debug histgram output: node_depth", 5, 1, 10)
gen.add("delta_step", double_t, 0, "Debug histgram output: delta_step", 0.3, 0.01, 2)
#
gen.add("robotRadius", double_t, 0, "Debug cross point parameter RobotRadius", 0.3145, 0.1, 1)
gen.add("robotSteerRadius", double_t, 0, "Debug cross point parameter RobotRadius", 0.3145, 0.1, 1)
gen.add("gain_p", double_t, 0, "Debug cross point parameter RobotRadius", 0.01, 0.001, 1)
gen.add("default_vel", double_t, 0, "Debug cross point parameter RobotRadius", 0.2, 0.001, 0.6)
#debug
gen.add("debugFlag", bool_t, 0, "Flagment of debug program ", False)
gen.add("displayDebugClstr", bool_t, 0, "Flagment of debug program ", False)
gen.add("marker_life_time", double_t, 0, "Flagment of debug program ", 0.5, 0, 1000)
gen.add("display_searching_process", bool_t, 0, "Flagment of debug program ", False)
gen.add("display_fps", double_t, 0, "Flagment of debug program ", 100, 1, 10000)
gen.add("sparse_rate", int_t, 0, "Flagment of debug program ", 10000, 1, 10000)
#--goal
gen.add("debugGoalPosX", double_t, 0, "Debug output: goal pos X", 0, -8.0, 8.0)
gen.add("debugGoalPosY", double_t, 0, "Debug output: goal pos Y", 4.0, -8.0, 8.0)
#--robot
gen.add("debugRobotX1", double_t, 0, "Debug histgram output: robot posX", 0.0, -4, 4)
gen.add("debugRobotY1", double_t, 0, "Debug histgram output: robot posY", 0.0, -4, 4)
gen.add("debugRobotYaw", double_t, 0, "Debug histgram output: robot yaw", 90, -180, 180)
gen.add("debugCurAng", double_t, 0, "Debug output: current angle", 90, -180, 180)
gen.add("debugCmd_vel", double_t, 0, "Debug cross point parameter cmd_vel", 0, -1, 1)
gen.add("debugPrevTagAng", double_t, 0, "Debug output: previously target angle", 90, -180, 180)
gen.add("debugRobotRadius", double_t, 0, "Debug cross point parameter RobotRadius", 0.2, 0.1, 1)
#--obstacle
gen.add("debugObstacleX1", double_t, 0, "Debug histgram output: obstacle1 posX", 3.0, -4, 4)
gen.add("debugObstacleY1", double_t, 0, "Debug histgram output: obstacle1 posY", 3.0, -4, 4)
gen.add("debugObstacleH1", double_t, 0, "Debug histgram output: obstacle1 size", 0.3, 0.1, 10)
gen.add("debugObstacleW1", double_t, 0, "Debug histgram output: obstacle1 size", 0.3, 0.1, 10)
gen.add("debugObstacleVx1", double_t, 0, "Debug CPVFH output: obstacle1 VelX", -0.2, -1.0, 1.0)
gen.add("debugObstacleVy1", double_t, 0, "Debug CPVFH output: obstacle1 VelY", 0, -1.0, 1.0)
gen.add("debugObstacleX2", double_t, 0, "Debug histgram output: obstacle1 posX", 0.0, -4, 4)
gen.add("debugObstacleY2", double_t, 0, "Debug histgram output: obstacle1 posY", 2.0, -4, 4)
gen.add("debugObstacleH2", double_t, 0, "Debug histgram output: obstacle1 size", 0.2, 0.1, 10)
gen.add("debugObstacleW2", double_t, 0, "Debug histgram output: obstacle1 size", 1, 0.1, 10)
gen.add("debugObstacleVx2", double_t, 0, "Debug CPVFH output: obstacle1 VelX", 0, -1.0, 1.0)
gen.add("debugObstacleVy2", double_t, 0, "Debug CPVFH output: obstacle1 VelY", 0, -1.0, 1.0)
#
exit(gen.generate(PACKAGE, "local_navigation", "vfh_tdt"))